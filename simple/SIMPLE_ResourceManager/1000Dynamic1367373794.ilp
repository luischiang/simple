Minimize
 Cost:   LoadFunction 
Subject To
Coverage.1: f_1_0 + f_1_1 + f_1_2 + f_1_3  = 1
ProcLoad.M11: Load.M11  - 10 f_1_3 - 10 f_1_2 = 0
ProcLoad.M8: Load.M8  - 10 f_1_1 - 10 f_1_3 = 0
ProcLoad.M1: Load.M1  - 10 f_1_0 - 10 f_1_1 - 10 f_1_3 - 10 f_1_2 = 0
ProcLoad.M5: Load.M5  - 10 f_1_0 - 10 f_1_1 = 0
ProcLoad.M2: Load.M2  - 10 f_1_0 - 10 f_1_2 = 0
ProcLoadBound.M11: Load.M11 <= 100
ProcLoadBound.M8: Load.M8 <= 100
ProcLoadBound.M1: Load.M1 <= 100
ProcLoadBound.M5: Load.M5 <= 100
ProcLoadBound.M2: Load.M2 <= 100
MaxProcLoadBound.M11: Load.M11 - LoadFunction <= 0
MaxProcLoadBound.M8: Load.M8 - LoadFunction <= 0
MaxProcLoadBound.M1: Load.M1 - LoadFunction <= 0
MaxProcLoadBound.M5: Load.M5 - LoadFunction <= 0
MaxProcLoadBound.M2: Load.M2 - LoadFunction <= 0
RuleLoad.S6:  1 a_1_0 + 3 a_1_1 + 2 a_1_3 + 1 a_1_2 <= 1000
RuleLoad.S1:  2 a_1_0 + 2 a_1_1 + 2 a_1_3 + 2 a_1_2 <= 1000
RuleLoad.S11:  2 a_1_3 + 2 a_1_2 <= 1000
RuleLoad.S9:  1 a_1_2 <= 1000
RuleLoad.S10:  1 a_1_2 <= 1000
RuleLoad.S4:  1 a_1_0 + 1 a_1_1 + 1 a_1_3 + 1 a_1_2 <= 1000
RuleLoad.S8:  2 a_1_1 + 3 a_1_3 + 1 a_1_2 <= 1000
RuleLoad.S2:  2 a_1_0 + 2 a_1_2 <= 1000
RuleLoad.S5:  3 a_1_0 + 3 a_1_1 + 1 a_1_3 + 2 a_1_2 <= 1000
RuleLoad.S7:  2 a_1_3 + 1 a_1_2 <= 1000
RuleLoad.S3:  2 a_1_0 + 2 a_1_2 <= 1000
SanityCheck.1.0: f_1_0 - a_1_0 <= 0
SanityCheck.1.1: f_1_1 - a_1_1 <= 0
SanityCheck.1.2: f_1_2 - a_1_2 <= 0
SanityCheck.1.3: f_1_3 - a_1_3 <= 0
Bounds
 0 <= f_1_0 <= 1
 0 <= f_1_1 <= 1
 0 <= f_1_2 <= 1
 0 <= f_1_3 <= 1
Binaries
a_1_0
a_1_1
a_1_2
a_1_3
End
